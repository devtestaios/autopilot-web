/**
 * Marketing Optimization Platform
 * Consolidates original PulseBridge.ai functionality into Master Terminal ecosystem
 * Features: Cross-platform campaigns, AI optimization, analytics, lead management
 */

'use client';

import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { useMarketingOptimization } from '@/contexts/MarketingOptimizationContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { 
  TrendingUp, 
  TrendingDown, 
  Target, 
  Brain, 
  Zap, 
  AlertTriangle,
  CheckCircle,
  Clock,
  BarChart3,
  Users,
  DollarSign,
  Eye,
  MousePointer,
  ShoppingCart,
  Star,
  Settings,
  Play,
  Pause,
  RefreshCw,
  Plus,
  Filter,
  Download,
  Share2,
  Bell,
  Lightbulb,
  Activity
} from 'lucide-react';

// Mock data for demonstration
const mockCampaigns = [
  {
    id: '1',
    name: 'Google Ads Q4 Campaign',
    platform: 'google_ads',
    status: 'active',
    client_name: 'TechCorp Inc.',
    budget: 10000,
    spend: 7500,
    metrics: {
      impressions: 150000,
      clicks: 4500,
      conversions: 180,
      ctr: 3.0,
      cpc: 1.67,
      cpa: 41.67,
      roas: 4.2,
      quality_score: 8.5
    },
    ai_optimization: {
      enabled: true,
      strategy: 'balanced',
      auto_budget: true,
      auto_bidding: true,
      optimization_score: 87
    }
  },
  {
    id: '2',
    name: 'Meta Holiday Promotion',
    platform: 'meta',
    status: 'active',
    client_name: 'RetailPlus',
    budget: 8000,
    spend: 3200,
    metrics: {
      impressions: 95000,
      clicks: 2850,
      conversions: 142,
      ctr: 3.0,
      cpc: 1.12,
      cpa: 22.54,
      roas: 5.8,
      quality_score: 7.2
    },
    ai_optimization: {
      enabled: true,
      strategy: 'aggressive',
      auto_budget: true,
      auto_bidding: false,
      optimization_score: 92
    }
  },
  {
    id: '3',
    name: 'LinkedIn B2B Lead Gen',
    platform: 'linkedin',
    status: 'paused',
    client_name: 'SaaS Innovations',
    budget: 5000,
    spend: 4800,
    metrics: {
      impressions: 45000,
      clicks: 900,
      conversions: 45,
      ctr: 2.0,
      cpc: 5.33,
      cpa: 106.67,
      roas: 2.4,
      quality_score: 6.8
    },
    ai_optimization: {
      enabled: false,
      strategy: 'conservative',
      auto_budget: false,
      auto_bidding: false,
      optimization_score: 65
    }
  }
];

const mockLeads = [
  {
    id: '1',
    name: 'John Doe',
    email: 'john.doe@techcorp.com',
    company: 'TechCorp Solutions',
    source: 'Google Ads Campaign',
    score: 85,
    status: 'qualified',
    stage: 'consideration'
  },
  {
    id: '2',
    name: 'Sarah Wilson',
    email: 'sarah.wilson@retailplus.com',
    company: 'RetailPlus Inc',
    source: 'Meta Holiday Campaign',
    score: 72,
    status: 'contacted',
    stage: 'interest'
  },
  {
    id: '3',
    name: 'Mike Chen',
    email: 'mike.chen@saasinnov.com',
    company: 'SaaS Innovations',
    source: 'LinkedIn B2B Campaign',
    score: 91,
    status: 'converted',
    stage: 'purchase'
  }
];

const mockAlerts = [
  {
    id: '1',
    type: 'budget',
    severity: 'high',
    title: 'Budget Threshold Exceeded',
    message: 'Google Ads Q4 Campaign has exceeded 80% of monthly budget with 10 days remaining.',
    status: 'active'
  },
  {
    id: '2',
    type: 'performance',
    severity: 'medium',
    title: 'Declining Click-Through Rate',
    message: 'Meta Holiday Promotion CTR has dropped by 15% over the last 3 days.',
    status: 'active'
  },
  {
    id: '3',
    type: 'opportunity',
    severity: 'medium',
    title: 'Keyword Expansion Opportunity',
    message: 'Search terms report shows high-volume related keywords not currently targeted.',
    status: 'active'
  }
];

// ==================== CAMPAIGN COMPONENTS ====================

const CampaignCard: React.FC<{ campaign: any }> = ({ campaign }) => {
  const statusColors = {
    active: 'bg-green-500',
    paused: 'bg-yellow-500',
    ended: 'bg-red-500',
    draft: 'bg-gray-500'
  };

  const platformIcons = {
    google_ads: 'üîç',
    meta: 'üë•',
    linkedin: 'üíº',
    cross_platform: 'üåê'
  };

  return (
    <Card className="relative group hover:shadow-lg transition-all duration-300">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-3">
            <div className="text-2xl">{platformIcons[campaign.platform as keyof typeof platformIcons] || 'üìä'}</div>
            <div>
              <CardTitle className="text-lg font-semibold">{campaign.name}</CardTitle>
              <p className="text-sm text-gray-600 dark:text-gray-400">{campaign.client_name}</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className={`w-3 h-3 rounded-full ${statusColors[campaign.status as keyof typeof statusColors]}`} />
            <Badge variant="secondary" className="capitalize">
              {campaign.status}
            </Badge>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Budget Progress */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Budget Utilization</span>
            <span className="font-medium">
              ${campaign.spend?.toLocaleString() || 0} / ${campaign.budget?.toLocaleString() || 0}
            </span>
          </div>
          <Progress 
            value={campaign.budget ? (campaign.spend / campaign.budget) * 100 : 0} 
            className="h-2"
          />
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <Eye className="w-4 h-4 text-blue-500" />
              <span className="text-xs text-gray-600">Impressions</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.impressions?.toLocaleString() || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <MousePointer className="w-4 h-4 text-green-500" />
              <span className="text-xs text-gray-600">Clicks</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.clicks?.toLocaleString() || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <ShoppingCart className="w-4 h-4 text-purple-500" />
              <span className="text-xs text-gray-600">Conversions</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.conversions || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <DollarSign className="w-4 h-4 text-emerald-500" />
              <span className="text-xs text-gray-600">ROAS</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.roas?.toFixed(2) || '0.00'}x</p>
          </div>
        </div>

        {/* AI Optimization Status */}
        {campaign.ai_optimization?.enabled && (
          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Brain className="w-4 h-4 text-blue-500" />
                <span className="text-sm font-medium">AI Optimization</span>
                <Badge variant="outline" className="text-xs">
                  {campaign.ai_optimization.strategy}
                </Badge>
              </div>
              <div className="flex items-center gap-1">
                <Star className="w-4 h-4 text-yellow-500 fill-current" />
                <span className="text-sm font-medium">
                  {campaign.ai_optimization.optimization_score || 0}/100
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="flex gap-2 pt-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="flex-1"
          >
            View Details
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="px-3"
          >
            <Brain className="w-4 h-4" />
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            className="px-3"
          >
            {campaign.status === 'active' ? 
              <Pause className="w-4 h-4" /> : 
              <Play className="w-4 h-4" />
            }
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

// ==================== MAIN COMPONENT ====================

export default function MarketingOptimizationPlatform() {
  const [activeTab, setActiveTab] = useState('overview');
  const [campaigns] = useState(mockCampaigns);
  const [leads] = useState(mockLeads);
  const [alerts] = useState(mockAlerts);

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    if (score >= 40) return 'text-orange-600 bg-orange-100';
    return 'text-red-600 bg-red-100';
  };

  const getStatusColor = (status: string) => {
    const colors = {
      new: 'bg-blue-100 text-blue-800',
      contacted: 'bg-yellow-100 text-yellow-800',
      qualified: 'bg-green-100 text-green-800',
      converted: 'bg-emerald-100 text-emerald-800',
      lost: 'bg-red-100 text-red-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'performance': return <TrendingDown className="w-5 h-5" />;
      case 'budget': return <DollarSign className="w-5 h-5" />;
      case 'anomaly': return <AlertTriangle className="w-5 h-5" />;
      case 'opportunity': return <TrendingUp className="w-5 h-5" />;
      case 'error': return <AlertTriangle className="w-5 h-5" />;
      default: return <Bell className="w-5 h-5" />;
    }
  };

  const getAlertColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'border-red-500 bg-red-50 dark:bg-red-900/20';
      case 'high': return 'border-orange-500 bg-orange-50 dark:bg-orange-900/20';
      case 'medium': return 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20';
      case 'low': return 'border-blue-500 bg-blue-50 dark:bg-blue-900/20';
      default: return 'border-gray-500 bg-gray-50 dark:bg-gray-900/20';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2">
            Marketing Optimization Platform
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            AI-powered cross-platform marketing automation and optimization - Original PulseBridge.ai functionality integrated
          </p>
        </div>

        {/* Navigation */}
        <div className="flex gap-4 mb-6 border-b border-gray-200 dark:border-gray-700">
          {[
            { id: 'overview', label: 'Overview', icon: Activity },
            { id: 'campaigns', label: 'Campaigns', icon: Target },
            { id: 'analytics', label: 'Analytics', icon: BarChart3 },
            { id: 'leads', label: 'Lead Management', icon: Users },
            { id: 'alerts', label: 'Smart Alerts', icon: Bell },
            { id: 'optimization', label: 'AI Optimization', icon: Brain }
          ].map((tab) => {
            const IconComponent = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 px-4 py-2 border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
                }`}
              >
                <IconComponent className="w-4 h-4" />
                <span className="hidden sm:inline">{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Content */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Active Campaigns</p>
                      <p className="text-2xl font-bold">
                        {campaigns.filter(c => c.status === 'active').length}
                      </p>
                    </div>
                    <Target className="w-8 h-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Total Spend</p>
                      <p className="text-2xl font-bold">
                        ${campaigns.reduce((acc, c) => acc + (c.spend || 0), 0).toLocaleString()}
                      </p>
                    </div>
                    <DollarSign className="w-8 h-8 text-red-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Avg ROAS</p>
                      <p className="text-2xl font-bold">
                        {campaigns.length > 0 ? 
                          (campaigns.reduce((acc, c) => acc + (c.metrics?.roas || 0), 0) / campaigns.length).toFixed(2) : 
                          '0.00'
                        }x
                      </p>
                    </div>
                    <TrendingUp className="w-8 h-8 text-green-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">AI Optimized</p>
                      <p className="text-2xl font-bold">
                        {campaigns.filter(c => c.ai_optimization?.enabled).length}
                      </p>
                    </div>
                    <Brain className="w-8 h-8 text-purple-500" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Active Campaigns */}
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle>Active Campaigns</CardTitle>
                  <Button>
                    <Plus className="w-4 h-4 mr-2" />
                    New Campaign
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {campaigns.map((campaign) => (
                    <CampaignCard key={campaign.id} campaign={campaign} />
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'campaigns' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">Campaign Management</h2>
                <p className="text-gray-600 dark:text-gray-400">
                  Manage and optimize your cross-platform campaigns
                </p>
              </div>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                New Campaign
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {campaigns.map((campaign) => (
                <CampaignCard key={campaign.id} campaign={campaign} />
              ))}
            </div>
          </div>
        )}

        {activeTab === 'leads' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">Lead Management</h2>
                <p className="text-gray-600 dark:text-gray-400">
                  Manage and score your leads across all campaigns
                </p>
              </div>
              <div className="flex gap-2">
                <Button>
                  <Brain className="w-4 h-4 mr-2" />
                  Score Leads
                </Button>
                <Button variant="outline">
                  <Download className="w-4 h-4 mr-2" />
                  Export
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {leads.map((lead) => (
                <Card key={lead.id} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-start">
                        <div>
                          <h4 className="font-semibold">{lead.name}</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-400">{lead.email}</p>
                          {lead.company && (
                            <p className="text-sm text-gray-500">{lead.company}</p>
                          )}
                        </div>
                        <Badge className={getScoreColor(lead.score)}>
                          {lead.score}/100
                        </Badge>
                      </div>

                      <div className="flex gap-2">
                        <Badge className={getStatusColor(lead.status)}>
                          {lead.status}
                        </Badge>
                        <Badge variant="outline">
                          {lead.stage}
                        </Badge>
                      </div>

                      <div className="text-sm space-y-1">
                        <p><strong>Source:</strong> {lead.source}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'alerts' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">Smart Alerts</h2>
                <p className="text-gray-600 dark:text-gray-400">
                  Monitor your campaigns and get AI-powered insights
                </p>
              </div>
              <Badge variant="destructive">
                {alerts.filter(alert => alert.status === 'active').length} active
              </Badge>
            </div>

            <div className="space-y-4">
              {alerts.map((alert) => (
                <Card key={alert.id} className={`border-l-4 ${getAlertColor(alert.severity)}`}>
                  <CardContent className="p-6">
                    <div className="flex items-start gap-4">
                      <div className={`p-2 rounded-lg ${
                        alert.severity === 'critical' ? 'bg-red-100 text-red-600' :
                        alert.severity === 'high' ? 'bg-orange-100 text-orange-600' :
                        alert.severity === 'medium' ? 'bg-yellow-100 text-yellow-600' :
                        'bg-blue-100 text-blue-600'
                      }`}>
                        {getAlertIcon(alert.type)}
                      </div>
                      
                      <div className="flex-1 space-y-2">
                        <div className="flex items-start justify-between">
                          <div>
                            <h4 className="font-semibold text-lg">{alert.title}</h4>
                            <p className="text-gray-600 dark:text-gray-400">{alert.message}</p>
                          </div>
                          <div className="flex gap-2">
                            <Badge variant="outline" className="capitalize">
                              {alert.type}
                            </Badge>
                            <Badge 
                              variant={alert.severity === 'critical' ? 'destructive' : 
                                     alert.severity === 'high' ? 'destructive' : 'secondary'}
                            >
                              {alert.severity}
                            </Badge>
                          </div>
                        </div>

                        <div className="flex gap-2 pt-2">
                          <Button size="sm">
                            Acknowledge
                          </Button>
                          <Button variant="outline" size="sm">
                            Resolve
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">Analytics Intelligence</h2>
                <p className="text-gray-600 dark:text-gray-400">
                  Advanced analytics and performance insights
                </p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Total Spend</p>
                      <p className="text-2xl font-bold">$23,500</p>
                    </div>
                    <DollarSign className="w-8 h-8 text-red-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Total Revenue</p>
                      <p className="text-2xl font-bold">$98,420</p>
                    </div>
                    <TrendingUp className="w-8 h-8 text-green-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Overall ROAS</p>
                      <p className="text-2xl font-bold">4.19x</p>
                    </div>
                    <Target className="w-8 h-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Total Leads</p>
                      <p className="text-2xl font-bold">558</p>
                    </div>
                    <Users className="w-8 h-8 text-purple-500" />
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Platform Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {campaigns.map((campaign, index) => (
                    <div key={index} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">
                          {campaign.platform === 'google_ads' && 'üîç'}
                          {campaign.platform === 'meta' && 'üë•'}
                          {campaign.platform === 'linkedin' && 'üíº'}
                        </div>
                        <div>
                          <h4 className="font-medium capitalize">{campaign.platform.replace('_', ' ')}</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-400">
                            {campaign.name}
                          </p>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <p className="font-semibold">${campaign.spend?.toLocaleString() || '0'}</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          ROAS: {campaign.metrics?.roas?.toFixed(2) || '0.00'}x
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === 'optimization' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">AI Optimization</h2>
                <p className="text-gray-600 dark:text-gray-400">
                  Configure and monitor AI-powered campaign optimization
                </p>
              </div>
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  AI Configuration
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">AI Optimization</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Enable AI to automatically optimize your campaigns
                    </p>
                  </div>
                  <div className="bg-blue-600 w-11 h-6 rounded-full p-1 transition-colors">
                    <div className="bg-white w-4 h-4 rounded-full shadow-md transform translate-x-5 transition-transform"></div>
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Optimization Mode</label>
                  <div className="bg-gray-100 dark:bg-gray-800 p-2 rounded-lg">
                    <p className="text-sm">Balanced Mode Active</p>
                  </div>
                </div>

                <Button className="w-full">
                  <Zap className="w-4 h-4 mr-2" />
                  Trigger AI Analysis
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="w-5 h-5" />
                  Recent Decisions
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Brain className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                    No Optimization Decisions
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400">
                    AI optimization decisions will appear here once analysis is complete.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}

// ==================== CAMPAIGN COMPONENTS ====================

// ==================== DUPLICATE COMPONENT REMOVED ====================
// Following systematic error resolution from ADVANCED_CODING_AI_DISSERTATION.md
// Removed duplicate CampaignCard definition - using enhanced version above (line 189-325)

  return (
    <Card className="relative group hover:shadow-lg transition-all duration-300">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-3">
            <div className="text-2xl">{platformIcons[campaign.platform] || 'üìä'}</div>
            <div>
              <CardTitle className="text-lg font-semibold">{campaign.name}</CardTitle>
              <p className="text-sm text-gray-600 dark:text-gray-400">{campaign.client_name}</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className={`w-3 h-3 rounded-full ${statusColors[campaign.status]}`} />
            <Badge variant="secondary" className="capitalize">
              {campaign.status}
            </Badge>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Budget Progress */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Budget Utilization</span>
            <span className="font-medium">
              ${campaign.spend?.toLocaleString() || 0} / ${campaign.budget?.toLocaleString() || 0}
            </span>
          </div>
          <Progress 
            value={(campaign.spend / campaign.budget) * 100} 
            className="h-2"
          />
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <Eye className="w-4 h-4 text-blue-500" />
              <span className="text-xs text-gray-600">Impressions</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.impressions?.toLocaleString() || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <MousePointer className="w-4 h-4 text-green-500" />
              <span className="text-xs text-gray-600">Clicks</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.clicks?.toLocaleString() || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <ShoppingCart className="w-4 h-4 text-purple-500" />
              <span className="text-xs text-gray-600">Conversions</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.conversions || '0'}</p>
          </div>
          
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <DollarSign className="w-4 h-4 text-emerald-500" />
              <span className="text-xs text-gray-600">ROAS</span>
            </div>
            <p className="font-semibold">{campaign.metrics?.roas?.toFixed(2) || '0.00'}x</p>
          </div>
        </div>

        {/* AI Optimization Status */}
        {campaign.ai_optimization?.enabled && (
          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Brain className="w-4 h-4 text-blue-500" />
                <span className="text-sm font-medium">AI Optimization</span>
                <Badge variant="outline" className="text-xs">
                  {campaign.ai_optimization.strategy}
                </Badge>
              </div>
              <div className="flex items-center gap-1">
                <Star className="w-4 h-4 text-yellow-500 fill-current" />
                <span className="text-sm font-medium">
                  {campaign.ai_optimization.optimization_score || 0}/100
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="flex gap-2 pt-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => setActiveCampaign(campaign)}
            className="flex-1"
          >
            View Details
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => optimizeCampaign(campaign.id)}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// ==================== ANALYTICS COMPONENTS ====================

const AnalyticsDashboard: React.FC = () => {
  const { analytics, loading, fetchAnalytics } = useMarketingOptimization();
  const [timeframe, setTimeframe] = useState<'day' | 'week' | 'month' | 'quarter' | 'year'>('month');

  useEffect(() => {
    fetchAnalytics(timeframe);
  }, [timeframe, fetchAnalytics]);

  if (loading.analytics) {
    return (
      <div className="space-y-6">
        {Array.from({ length: 4 }).map((_, i) => (
          <div key={i} className="h-32 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse" />
        ))}
      </div>
    );
  }

  if (!analytics) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center py-8">
          <div className="text-center">
            <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              No Analytics Data
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              Analytics data will appear here once campaigns are running.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Total Spend</p>
                <p className="text-2xl font-bold">${analytics.overview.total_spend?.toLocaleString() || '0'}</p>
              </div>
              <DollarSign className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Total Revenue</p>
                <p className="text-2xl font-bold">${analytics.overview.total_revenue?.toLocaleString() || '0'}</p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Overall ROAS</p>
                <p className="text-2xl font-bold">{analytics.overview.overall_roas?.toFixed(2) || '0.00'}x</p>
              </div>
              <Target className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Active Campaigns</p>
                <p className="text-2xl font-bold">{analytics.overview.total_campaigns || '0'}</p>
              </div>
              <Activity className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Platform Performance */}
      <Card>
        <CardHeader>
          <CardTitle>Platform Performance</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {analytics.platform_performance?.map((platform, index) => (
              <div key={index} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="text-2xl">
                    {platform.platform === 'google_ads' && 'üîç'}
                    {platform.platform === 'meta' && 'üë•'}
                    {platform.platform === 'linkedin' && 'üíº'}
                    {!['google_ads', 'meta', 'linkedin'].includes(platform.platform) && 'üìä'}
                  </div>
                  <div>
                    <h4 className="font-medium capitalize">{platform.platform.replace('_', ' ')}</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {platform.campaigns} campaigns ‚Ä¢ {platform.leads} leads
                    </p>
                  </div>
                </div>
                
                <div className="text-right">
                  <p className="font-semibold">${platform.spend?.toLocaleString() || '0'}</p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    ROAS: {platform.roas?.toFixed(2) || '0.00'}x
                  </p>
                </div>
              </div>
            )) || (
              <p className="text-center text-gray-600 dark:text-gray-400 py-8">
                No platform data available
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* AI Insights */}
      {analytics.ai_insights && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-yellow-500" />
                Top Opportunities
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analytics.ai_insights.top_opportunities?.map((opportunity, index) => (
                  <div key={index} className="border-l-4 border-blue-500 pl-4">
                    <p className="font-medium">{opportunity.opportunity}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                      {opportunity.potential_impact}
                    </p>
                    <div className="flex items-center gap-2">
                      <Progress value={opportunity.confidence * 100} className="flex-1 h-2" />
                      <span className="text-xs text-gray-500">
                        {Math.round(opportunity.confidence * 100)}% confidence
                      </span>
                    </div>
                  </div>
                )) || (
                  <p className="text-gray-600 dark:text-gray-400">No opportunities identified</p>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-purple-500" />
                AI Recommendations
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analytics.ai_insights.recommendations?.map((rec, index) => (
                  <div key={index} className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <p className="font-medium">{rec.action}</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{rec.reason}</p>
                      </div>
                      <Badge 
                        variant={rec.priority === 'high' ? 'destructive' : 
                               rec.priority === 'medium' ? 'default' : 'secondary'}
                      >
                        {rec.priority}
                      </Badge>
                    </div>
                  </div>
                )) || (
                  <p className="text-gray-600 dark:text-gray-400">No recommendations available</p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

// ==================== LEAD MANAGEMENT ====================

const LeadManagement: React.FC = () => {
  const { leads, loading, leadFilters, scoreLeads } = useMarketingOptimization();
  const [viewMode, setViewMode] = useState<'cards' | 'table'>('cards');

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    if (score >= 40) return 'text-orange-600 bg-orange-100';
    return 'text-red-600 bg-red-100';
  };

  const getStatusColor = (status: string) => {
    const colors = {
      new: 'bg-blue-100 text-blue-800',
      contacted: 'bg-yellow-100 text-yellow-800',
      qualified: 'bg-green-100 text-green-800',
      converted: 'bg-emerald-100 text-emerald-800',
      lost: 'bg-red-100 text-red-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row gap-4 justify-between">
        <div>
          <h2 className="text-2xl font-bold">Lead Management</h2>
          <p className="text-gray-600 dark:text-gray-400">
            Manage and score your leads across all campaigns
          </p>
        </div>
        
        <div className="flex gap-2">
          <Button onClick={scoreLeads} disabled={loading.leads}>
            <Brain className="w-4 h-4 mr-2" />
            {loading.leads ? 'Scoring...' : 'Score Leads'}
          </Button>
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Total Leads</p>
                <p className="text-2xl font-bold">{leads.length}</p>
              </div>
              <Users className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Qualified</p>
                <p className="text-2xl font-bold">
                  {leads.filter(lead => lead.status === 'qualified').length}
                </p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Converted</p>
                <p className="text-2xl font-bold">
                  {leads.filter(lead => lead.status === 'converted').length}
                </p>
              </div>
              <Target className="w-8 h-8 text-emerald-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Avg Score</p>
                <p className="text-2xl font-bold">
                  {leads.length > 0 ? 
                    Math.round(leads.reduce((acc, lead) => acc + lead.score, 0) / leads.length) : 
                    0
                  }
                </p>
              </div>
              <Star className="w-8 h-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Leads List */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Leads</CardTitle>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Filter className="w-4 h-4 mr-2" />
                Filter
              </Button>
              <Select value={viewMode} onValueChange={(value: 'cards' | 'table') => setViewMode(value)}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="cards">Cards</SelectItem>
                  <SelectItem value="table">Table</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {viewMode === 'cards' ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {leads.map((lead) => (
                <Card key={lead.id} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex justify-between items-start">
                        <div>
                          <h4 className="font-semibold">{lead.name || 'Anonymous Lead'}</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-400">{lead.email}</p>
                          {lead.company && (
                            <p className="text-sm text-gray-500">{lead.company}</p>
                          )}
                        </div>
                        <Badge className={getScoreColor(lead.score)}>
                          {lead.score}/100
                        </Badge>
                      </div>

                      <div className="flex gap-2">
                        <Badge className={getStatusColor(lead.status)}>
                          {lead.status}
                        </Badge>
                        <Badge variant="outline">
                          {lead.stage}
                        </Badge>
                      </div>

                      <div className="text-sm space-y-1">
                        <p><strong>Source:</strong> {lead.source}</p>
                        <p><strong>Conversion Prob:</strong> {Math.round(lead.ai_insights?.conversion_probability * 100 || 0)}%</p>
                        <p><strong>Est. Value:</strong> ${lead.ai_insights?.predicted_value || 0}</p>
                      </div>

                      {lead.ai_insights?.recommended_actions && lead.ai_insights.recommended_actions.length > 0 && (
                        <div className="bg-blue-50 dark:bg-blue-900/20 p-2 rounded text-sm">
                          <p className="font-medium mb-1">AI Recommendations:</p>
                          <ul className="list-disc list-inside text-xs space-y-1">
                            {lead.ai_insights.recommended_actions.slice(0, 2).map((action, index) => (
                              <li key={index}>{action}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">Name</th>
                    <th className="text-left p-2">Email</th>
                    <th className="text-left p-2">Score</th>
                    <th className="text-left p-2">Status</th>
                    <th className="text-left p-2">Source</th>
                    <th className="text-left p-2">Conv. Prob</th>
                  </tr>
                </thead>
                <tbody>
                  {leads.map((lead) => (
                    <tr key={lead.id} className="border-b hover:bg-gray-50 dark:hover:bg-gray-800">
                      <td className="p-2">{lead.name || 'Anonymous'}</td>
                      <td className="p-2">{lead.email}</td>
                      <td className="p-2">
                        <Badge className={getScoreColor(lead.score)}>
                          {lead.score}
                        </Badge>
                      </td>
                      <td className="p-2">
                        <Badge className={getStatusColor(lead.status)}>
                          {lead.status}
                        </Badge>
                      </td>
                      <td className="p-2">{lead.source}</td>
                      <td className="p-2">{Math.round(lead.ai_insights?.conversion_probability * 100 || 0)}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

// ==================== ALERTS COMPONENT ====================

const AlertsManagement: React.FC = () => {
  const { alerts, unreadAlerts, acknowledgeAlert, resolveAlert } = useMarketingOptimization();

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'performance': return <TrendingDown className="w-5 h-5" />;
      case 'budget': return <DollarSign className="w-5 h-5" />;
      case 'anomaly': return <AlertTriangle className="w-5 h-5" />;
      case 'opportunity': return <TrendingUp className="w-5 h-5" />;
      case 'error': return <AlertTriangle className="w-5 h-5" />;
      default: return <Bell className="w-5 h-5" />;
    }
  };

  const getAlertColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'border-red-500 bg-red-50 dark:bg-red-900/20';
      case 'high': return 'border-orange-500 bg-orange-50 dark:bg-orange-900/20';
      case 'medium': return 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20';
      case 'low': return 'border-blue-500 bg-blue-50 dark:bg-blue-900/20';
      default: return 'border-gray-500 bg-gray-50 dark:bg-gray-900/20';
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">Smart Alerts</h2>
          <p className="text-gray-600 dark:text-gray-400">
            Monitor your campaigns and get AI-powered insights
          </p>
        </div>
        
        {unreadAlerts > 0 && (
          <Badge variant="destructive">
            {unreadAlerts} unread
          </Badge>
        )}
      </div>

      {/* Alerts List */}
      <div className="space-y-4">
        {alerts.length === 0 ? (
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <div className="text-center">
                <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                  All Clear!
                </h3>
                <p className="text-gray-600 dark:text-gray-400">
                  No active alerts. Your campaigns are running smoothly.
                </p>
              </div>
            </CardContent>
          </Card>
        ) : (
          alerts.map((alert) => (
            <Card key={alert.id} className={`border-l-4 ${getAlertColor(alert.severity)}`}>
              <CardContent className="p-6">
                <div className="flex items-start gap-4">
                  <div className={`p-2 rounded-lg ${
                    alert.severity === 'critical' ? 'bg-red-100 text-red-600' :
                    alert.severity === 'high' ? 'bg-orange-100 text-orange-600' :
                    alert.severity === 'medium' ? 'bg-yellow-100 text-yellow-600' :
                    'bg-blue-100 text-blue-600'
                  }`}>
                    {getAlertIcon(alert.type)}
                  </div>
                  
                  <div className="flex-1 space-y-2">
                    <div className="flex items-start justify-between">
                      <div>
                        <h4 className="font-semibold text-lg">{alert.title}</h4>
                        <p className="text-gray-600 dark:text-gray-400">{alert.message}</p>
                      </div>
                      <div className="flex gap-2">
                        <Badge variant="outline" className="capitalize">
                          {alert.type}
                        </Badge>
                        <Badge 
                          variant={alert.severity === 'critical' ? 'destructive' : 
                                 alert.severity === 'high' ? 'destructive' : 'secondary'}
                        >
                          {alert.severity}
                        </Badge>
                      </div>
                    </div>

                    {alert.threshold_exceeded && (
                      <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                        <p className="text-sm">
                          <strong>{alert.threshold_exceeded.metric}:</strong> {' '}
                          {alert.threshold_exceeded.current_value} (threshold: {alert.threshold_exceeded.threshold})
                        </p>
                      </div>
                    )}

                    {alert.ai_recommendation && (
                      <div className="bg-blue-100 dark:bg-blue-900/20 p-3 rounded-lg">
                        <div className="flex items-start gap-2">
                          <Brain className="w-4 h-4 text-blue-500 mt-1" />
                          <div>
                            <p className="font-medium text-sm">AI Recommendation:</p>
                            <p className="text-sm">{alert.ai_recommendation.action}</p>
                            <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                              Expected Impact: {alert.ai_recommendation.expected_impact} 
                              ({Math.round(alert.ai_recommendation.confidence * 100)}% confidence)
                            </p>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="flex items-center justify-between pt-2">
                      <div className="flex items-center gap-2 text-sm text-gray-500">
                        <Clock className="w-4 h-4" />
                        {new Date(alert.created_at).toLocaleDateString()}
                      </div>
                      
                      <div className="flex gap-2">
                        {alert.status === 'active' && (
                          <>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => acknowledgeAlert(alert.id)}
                            >
                              Acknowledge
                            </Button>
                            <Button 
                              size="sm"
                              onClick={() => resolveAlert(alert.id)}
                            >
                              Resolve
                            </Button>
                          </>
                        )}
                        {alert.status === 'acknowledged' && (
                          <Button 
                            size="sm"
                            onClick={() => resolveAlert(alert.id)}
                          >
                            Resolve
                          </Button>
                        )}
                        {alert.status === 'resolved' && (
                          <Badge variant="secondary">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Resolved
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
};

// ==================== AI OPTIMIZATION ====================

const AIOptimization: React.FC = () => {
  const { 
    aiOptimization, 
    optimizationDecisions, 
    updateAISettings, 
    triggerOptimization,
    loading
  } = useMarketingOptimization();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold">AI Optimization</h2>
        <p className="text-gray-600 dark:text-gray-400">
          Configure and monitor AI-powered campaign optimization
        </p>
      </div>

      {/* AI Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            AI Configuration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-medium">AI Optimization</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Enable AI to automatically optimize your campaigns
              </p>
            </div>
            <Switch
              checked={aiOptimization.enabled}
              onCheckedChange={(checked) => updateAISettings({ enabled: checked })}
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Optimization Mode</label>
            <Select 
              value={aiOptimization.mode}
              onValueChange={(value: 'conservative' | 'balanced' | 'aggressive') => 
                updateAISettings({ mode: value })
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="conservative">Conservative</SelectItem>
                <SelectItem value="balanced">Balanced</SelectItem>
                <SelectItem value="aggressive">Aggressive</SelectItem>
              </SelectContent>
            </Select>
            <p className="text-xs text-gray-500">
              {aiOptimization.mode === 'conservative' && 'Small, safe optimizations with high confidence'}
              {aiOptimization.mode === 'balanced' && 'Moderate optimizations balancing risk and reward'}
              {aiOptimization.mode === 'aggressive' && 'Bold optimizations for maximum performance gains'}
            </p>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Auto-Approve Threshold</label>
            <div className="px-3">
              <Progress value={aiOptimization.auto_approve_threshold * 100} className="mb-2" />
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {Math.round(aiOptimization.auto_approve_threshold * 100)}% confidence required for automatic approval
              </p>
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Daily Budget Limit</label>
            <div className="flex items-center gap-2">
              <DollarSign className="w-4 h-4 text-gray-500" />
              <Input
                type="number"
                value={aiOptimization.daily_budget_limit}
                onChange={(e) => updateAISettings({ daily_budget_limit: Number(e.target.value) })}
                className="w-32"
              />
              <span className="text-sm text-gray-500">per day</span>
            </div>
          </div>

          <Button 
            onClick={triggerOptimization}
            disabled={loading.optimization}
            className="w-full"
          >
            <Zap className="w-4 h-4 mr-2" />
            {loading.optimization ? 'Analyzing...' : 'Trigger AI Analysis'}
          </Button>
        </CardContent>
      </Card>

      {/* Optimization Decisions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5" />
            Recent Decisions
          </CardTitle>
        </CardHeader>
        <CardContent>
          {optimizationDecisions.length === 0 ? (
            <div className="text-center py-8">
              <Brain className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                No Optimization Decisions
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                AI optimization decisions will appear here once analysis is complete.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {optimizationDecisions.map((decision) => (
                <Card key={decision.id} className="border">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <h4 className="font-semibold capitalize">
                          {decision.type.replace('_', ' ')}
                        </h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {decision.ai_system} ‚Ä¢ {Math.round(decision.decision.confidence * 100)}% confidence
                        </p>
                      </div>
                      <Badge 
                        variant={
                          decision.status === 'implemented' ? 'default' :
                          decision.status === 'approved' ? 'secondary' :
                          decision.status === 'rejected' ? 'destructive' :
                          'outline'
                        }
                      >
                        {decision.status}
                      </Badge>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <p className="font-medium">Recommended Action:</p>
                        <p className="text-sm">{decision.decision.action}</p>
                      </div>

                      <div>
                        <p className="font-medium">Reasoning:</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {decision.decision.reasoning}
                        </p>
                      </div>

                      {Object.keys(decision.decision.expected_improvement).length > 0 && (
                        <div>
                          <p className="font-medium mb-2">Expected Improvements:</p>
                          <div className="grid grid-cols-2 gap-2">
                            {Object.entries(decision.decision.expected_improvement).map(([metric, improvement]) => (
                              <div key={metric} className="text-sm">
                                <span className="capitalize">{metric.replace('_', ' ')}:</span>
                                <span className="ml-1 font-medium text-green-600">
                                  +{typeof improvement === 'number' ? improvement.toFixed(1) : improvement}%
                                </span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {decision.status === 'pending' && (
                        <div className="flex gap-2 pt-2">
                          <Button size="sm" onClick={() => {/* approveOptimization(decision.id) */}}>
                            Approve
                          </Button>
                          <Button variant="outline" size="sm" onClick={() => {/* rejectOptimization(decision.id) */}}>
                            Reject
                          </Button>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

