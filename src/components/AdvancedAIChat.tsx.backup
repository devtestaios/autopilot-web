'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Bot, 
  User, 
  Loader2, 
  Sparkles, 
  Zap, 
  TrendingUp, 
  Target, 
  DollarSign,
  BarChart3,
  Settings,
  Play,
  Pause,
  AlertTriangle,
  CheckCircle
} from 'lucide-react';
import { useUnifiedAI } from '@/contexts/UnifiedAIContext';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  actions?: AIAction[];
  suggestions?: string[];
}

interface AIAction {
  id: string;
  type: 'navigate' | 'campaign_action' | 'optimization' | 'analysis';
  function: string;
  description: string;
  parameters: any;
  impact: 'low' | 'medium' | 'high';
  requiresApproval: boolean;
  status: 'pending' | 'approved' | 'executed' | 'rejected';
}

export default function AdvancedAIChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Hello! I\'m your AI marketing assistant. I can help you optimize campaigns, analyze performance, manage budgets, and navigate the platform. What would you like me to help you with today?',
      timestamp: new Date(),
      suggestions: [
        'Show me campaign performance',
        'Optimize my Google Ads budget',
        'Pause underperforming campaigns',
        'Navigate to analytics dashboard'
      ]
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [pendingActions, setPendingActions] = useState<AIAction[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const { 
    executeAIAction, 
    autonomousMode, 
    aiStatus,
    navigateToPage,
    showNotification 
  } = useUnifiedAI();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // Send message to AI backend
      const response = await fetch('https://autopilot-api-1.onrender.com/api/v1/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: inputMessage,
          context: {
            current_page: window.location.pathname,
            autonomous_mode: autonomousMode,
            ai_status: aiStatus
          },
          conversation_history: messages.slice(-5) // Send last 5 messages for context
        }),
      });

      if (response.ok) {
        const aiResponse = await response.json();
        
        const assistantMessage: ChatMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: aiResponse.response,
          timestamp: new Date(),
          actions: aiResponse.actions?.map((action: any) => ({
            ...action,
            id: Date.now().toString() + Math.random(),
            status: autonomousMode && !action.requiresApproval ? 'approved' : 'pending'
          })) || [],
          suggestions: aiResponse.suggestions || []
        };

        setMessages(prev => [...prev, assistantMessage]);

        // Handle actions
        if (assistantMessage.actions && assistantMessage.actions.length > 0) {
          for (const action of assistantMessage.actions) {
            if (autonomousMode && !action.requiresApproval) {
              // Execute immediately in autonomous mode
              await executeAction(action);
            } else {
              // Add to pending actions for approval
              setPendingActions(prev => [...prev, action]);
            }
          }
        }
      } else {
        throw new Error('Failed to get AI response');
      }
    } catch (error) {
      const errorMessage: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'I\'m sorry, I encountered an error processing your request. Please try again or check if the backend service is available.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const executeAction = async (action: AIAction) => {
    try {
      let result;
      
      switch (action.type) {
        case 'navigate':
          navigateToPage(action.parameters.page);
          showNotification('Navigation', `Navigated to ${action.parameters.page}`, 'success');
          break;
          
        case 'campaign_action':
          result = await executeAIAction({
            type: 'campaign_action',
            function: action.function,
            arguments: action.parameters
          });
          showNotification('Campaign Action', action.description, 'success');
          break;
          
        case 'optimization':
          result = await executeAIAction({
            type: 'optimization',
            function: action.function,
            arguments: action.parameters
          });
          showNotification('Optimization', action.description, 'success');
          break;
          
        case 'analysis':
          result = await executeAIAction({
            type: 'analysis',
            function: action.function,
            arguments: action.parameters
          });
          showNotification('Analysis', action.description, 'info');
          break;
      }

      // Update action status
      setPendingActions(prev => prev.map(a => 
        a.id === action.id ? { ...a, status: 'executed' } : a
      ));

    } catch (error) {
      showNotification('Error', `Failed to execute action: ${action.description}`, 'error');
      setPendingActions(prev => prev.map(a => 
        a.id === action.id ? { ...a, status: 'rejected' } : a
      ));
    }
  };

  const handleApproveAction = async (actionId: string) => {
    const action = pendingActions.find(a => a.id === actionId);
    if (action) {
      await executeAction(action);
    }
  };

  const handleRejectAction = (actionId: string) => {
    setPendingActions(prev => prev.map(a => 
      a.id === actionId ? { ...a, status: 'rejected' } : a
    ));
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  const getActionIcon = (type: string) => {
    switch (type) {
      case 'navigate': return <BarChart3 className="h-4 w-4" />;
      case 'campaign_action': return <Target className="h-4 w-4" />;
      case 'optimization': return <Zap className="h-4 w-4" />;
      case 'analysis': return <TrendingUp className="h-4 w-4" />;
      default: return <Settings className="h-4 w-4" />;
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'text-red-600 bg-red-50 dark:bg-red-900/20';
      case 'medium': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20';
      case 'low': return 'text-green-600 bg-green-50 dark:bg-green-900/20';
      default: return 'text-gray-600 bg-gray-50 dark:bg-gray-900/20';
    }
  };

  return (
    <div className="flex flex-col h-[600px] bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-2">
          <Bot className="h-6 w-6 text-blue-600" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">AI Assistant</h3>
          <div className={`px-2 py-1 rounded-full text-xs font-medium ${
            aiStatus === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' :
            'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
          }`}>
            {aiStatus}
          </div>
        </div>
        <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
          {autonomousMode ? (
            <>
              <Play className="h-4 w-4 text-green-600" />
              <span>Autonomous</span>
            </>
          ) : (
            <>
              <Pause className="h-4 w-4 text-yellow-600" />
              <span>Supervised</span>
            </>
          )}
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[80%] ${message.role === 'user' ? 'order-2' : 'order-1'}`}>
              <div className={`p-3 rounded-lg ${
                message.role === 'user' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'
              }`}>
                <p className="text-sm">{message.content}</p>
              </div>
              
              {/* Actions */}
              {message.actions && message.actions.length > 0 && (
                <div className="mt-2 space-y-2">
                  {message.actions.map((action) => (
                    <div key={action.id} className="p-3 border border-gray-200 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-800">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-2">
                          <div className="p-1 rounded bg-blue-100 dark:bg-blue-900/30">
                            {getActionIcon(action.type)}
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900 dark:text-white">{action.description}</p>
                            <div className="flex items-center space-x-2 mt-1">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getImpactColor(action.impact)}`}>
                                {action.impact} impact
                              </span>
                              {action.requiresApproval && (
                                <span className="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400">
                                  requires approval
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        {action.status === 'pending' && !autonomousMode && (
                          <div className="flex items-center space-x-1">
                            <button
                              onClick={() => handleApproveAction(action.id)}
                              className="p-1 text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20 rounded"
                              title="Approve"
                            >
                              <CheckCircle className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => handleRejectAction(action.id)}
                              className="p-1 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded"
                              title="Reject"
                            >
                              <AlertTriangle className="h-4 w-4" />
                            </button>
                          </div>
                        )}
                        
                        {action.status !== 'pending' && (
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            action.status === 'executed' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' :
                            action.status === 'approved' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400' :
                            'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'
                          }`}>
                            {action.status}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Suggestions */}
              {message.suggestions && message.suggestions.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {message.suggestions.map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => handleSuggestionClick(suggestion)}
                      className="px-3 py-1 text-xs bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              )}
              
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                {message.timestamp.toLocaleTimeString()}
              </p>
            </div>
            
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
              message.role === 'user' ? 'order-1 ml-2 bg-blue-600' : 'order-2 mr-2 bg-gray-300 dark:bg-gray-600'
            }`}>
              {message.role === 'user' ? (
                <User className="h-4 w-4 text-white" />
              ) : (
                <Bot className="h-4 w-4 text-gray-700 dark:text-gray-300" />
              )}
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start">
            <div className="w-8 h-8 rounded-full flex items-center justify-center mr-2 bg-gray-300 dark:bg-gray-600">
              <Bot className="h-4 w-4 text-gray-700 dark:text-gray-300" />
            </div>
            <div className="max-w-[80%] p-3 bg-gray-100 dark:bg-gray-700 rounded-lg">
              <div className="flex items-center space-x-2">
                <Loader2 className="h-4 w-4 animate-spin text-gray-600 dark:text-gray-400" />
                <span className="text-sm text-gray-600 dark:text-gray-400">AI is thinking...</span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-2">
          <input
            ref={inputRef}
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Ask me to optimize campaigns, analyze performance, or navigate the platform..."
            className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            disabled={isLoading}
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isLoading}
            className="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <Send className="h-4 w-4" />
          </button>
        </div>
        
        {pendingActions.filter(a => a.status === 'pending').length > 0 && (
          <div className="mt-2 text-xs text-yellow-600 dark:text-yellow-400">
            {pendingActions.filter(a => a.status === 'pending').length} action(s) awaiting approval
          </div>
        )}
      </div>
    </div>
  );
}